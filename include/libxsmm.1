/**
 * Executes a generated function or falls back to the linked LAPACK implementation.
 * If M, N, and K does not change for multiple calls, it is more efficient to query
 * and reuse the function pointer (libxsmm_dmm_dispatch).
 */
#define LIBXSMM_MM(REAL, M, N, K, A, B, C) { \
  if (LIBXSMM_MAX_MNK >= ((M) * (N) * (K))) { \
    const LIBXSMM_BLASPREC(libxsmm_, REAL, mm_function) libxsmm_mm_function_ = \
      LIBXSMM_BLASPREC(libxsmm_, REAL, mm_dispatch)((M), (N), (K)); \
    if (libxsmm_mm_function_) { \
      (*libxsmm_mm_function_)((A), (B), (C)); \
    } \
    else { \
      LIBXSMM_SMM(REAL, int, M, N, K, A, B, C); \
    } \
  } \
  else { \
    LIBXSMM_BLASMM(REAL, int, M, N, K, A, B, C); \
  } \
}

/** For compatibility with earlier versions of LIBXSMM. */
#define dc_smm_dnn(M, N, K, A, B, C) LIBXSMM_MM(double, M, N, K, A, B, C)

/** Type of a function generated for a specific M, N, and K. */
typedef void (*libxsmm_smm_function)(const float*, const float*, float*);
typedef void (*libxsmm_dmm_function)(const double*, const double*, double*);

/**
 * Returns the pointer of the generated function; zero if it does not exist.
 * Allows to amortize the cost of the dispatch over multiple calls.
 */
libxsmm_smm_function libxsmm_smm_dispatch(int M, int N, int K);
libxsmm_dmm_function libxsmm_dmm_dispatch(int M, int N, int K);
