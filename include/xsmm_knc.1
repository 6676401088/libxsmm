/**
 * Executes a generated function or falls back to the linked LAPACK implementation.
 * If M, N, and K does not change for multiple calls, it is more efficient to query
 * and reuse the function pointer (dc_smm_dnn_function).
 */
#define LIBXSMM_DMM(M, N, K, A, B, C) { \
  if ((LIBXSMM_MAX_M * LIBXSMM_MAX_N * LIBXSMM_MAX_K) >= (M * N * K)) { \
    const dc_smm_dnn_function_type dsmm_mnk = dc_smm_dnn_function(M, N, K); \
    if (dsmm_mnk) { \
      (*dsmm_mnk)(A, B, C); \
    } \
    else { \
      LIBXSMM_SMM(double, int, M, N, K, A, B, C); \
    } \
  } \
  else { \
    LIBXSMM_BLASMM(double, int, M, N, K, A, B, C); \
  } \
}

/** For compatibility with earlier versions of LIBXSMM. */
#define dc_smm_dnn(M, N, K, A, B, C) LIBXSMM_DMM(M, N, K, A, B, C)

/** Type of a function generated for a specific M, N, and K. */
typedef void (*dc_smm_dnn_function_type)(const double*, const double*, double*);

/**
 * Returns the pointer of the generated function; zero if it does not exist.
 * Allows to amortize the cost of the dispatch over multiple calls.
 */
dc_smm_dnn_function_type dc_smm_dnn_function(int M, int N, int K);
